{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor backLeft = motor(PORT1, ratio18_1, false);\n\nmotor backRight = motor(PORT2, ratio18_1, false);\n\nmotor front = motor(PORT3, ratio18_1, false);\n\ninertial mpu = inertial(PORT6);\n\ndistance distanceLeft = distance(PORT11);\ndistance distanceRight = distance(PORT12);\noptical colorLeft = optical(PORT17);\noptical colorRight = optical(PORT18);\noptical colorFront = optical(PORT16);\ncontroller Controller1 = controller(primary);\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       AutonCar.cpp                                              */\n/*    Author:       Jining Liu                                                */\n/*    Created:      04/26/2024                                                */\n/*    Description:  Autonomous Race Car for POE                               */\n/*                                                                            */\n/*    Important Code Line #'s:                                                */\n/*        User-adjustable values -------------------------- 76, 79, 82, 85    */\n/*        DO NOT CHANGE values ---------------------------------------- 88    */\n/*        Turns programming ------------------------------------------ 102    */\n/*        Main code exec block --------------------------------- 103 - 126    */\n/*        PID Controller --------------------------------------- 133 - 207    */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// decides which distance sensor to use\nbool useRightSensor = true;\n\n// decides distance between car and wall in mm\nconst int distanceFromWall = 100;\n\n// decides the intensity of system keep straight adjustments\nconst double pidMultiplier = 1;\n\n// decides speed of back motors\nint leftMotor = 95, rightMotor = 95;\n\n// DO NOT CHANGE: stores distance sensor data, default 0\nint lastLeft, currentLeft, lastRight, currentRight;\n\n// required to predefine functions??? vex version of cpp is dumb\nvoid pidDistanceStraight();\nvoid executeTurn(int i);\nvoid finalLeg();\nvoid abort();\n\n// auton turns programming\n// timing is automatic\n//\n// key:\n// 0 - left turn\n// 1 - right turn\nconst int carTurns[4] = {1, 1, 1, 0};\n\nint main() {\n\n  Controller1.ButtonX.pressed(abort);\n\n  mpu.calibrate();\n  mpu.setRotation(0, degrees);\n\n  backLeft.spin(forward);\n  backRight.spin(forward);\n  for (int i: carTurns) {\n\n    // if car is detecting wall where it's supposed to be, always loop pid\n    while (\n      (useRightSensor && currentRight < (distanceFromWall + 50))\n      ||\n      (!useRightSensor && currentLeft < (distanceFromWall + 50))\n    ) {\n      pidDistanceStraight();\n      wait(50, msec);\n    }\n\n    executeTurn(i);\n  }\n\n  finalLeg();\n}\n\n// predefine for pid, this is so dumb\nvoid updateDistance();\nvoid pidShiftLeft();\nvoid pidShiftRight();\n\n// pid for back motors keeping straight and correct distance from wall\nvoid pidDistanceStraight() {\n\n  updateDistance();\n\n  if (useRightSensor) {\n    // using right sensor\n    if (currentRight - 1 > distanceFromWall) {\n      // too far from wall\n      pidShiftRight();\n    } else if (currentRight + 1 < distanceFromWall) {\n      // too close to wall\n      pidShiftLeft();\n    } else {\n      // keep straight\n      if (currentRight - 1 > lastRight) {\n        pidShiftRight();\n      } else if (currentRight + 1 < lastRight) {\n        pidShiftLeft();\n      }\n    }\n  } else {\n    // using left sensor\n    if (currentLeft - 1 > distanceFromWall) {\n      // too far from wall\n      pidShiftLeft();\n    } else if (currentLeft + 1 < distanceFromWall) {\n      // too close to wall\n      pidShiftRight();\n    } else {\n      // keep straight\n      if (currentLeft - 1 > lastLeft) {\n        pidShiftLeft();\n      } else if (currentLeft + 1 < lastLeft) {\n        pidShiftRight();\n      }\n    }\n  }\n\n  // line 1: left distance\n  // line 2: right distance\n  //\n  // line 4: left motor velocity\n  // line 5: right motor velocity\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.print(currentLeft);\n  Brain.Screen.setCursor(2, 1);\n  Brain.Screen.print(currentRight);\n  Brain.Screen.setCursor(4, 1);\n  Brain.Screen.print(leftMotor);\n  Brain.Screen.setCursor(5, 1);\n  Brain.Screen.print(rightMotor);\n\n  backLeft.setVelocity(leftMotor, percent);\n  backRight.setVelocity(rightMotor, percent);\n}\n\nvoid pidShiftLeft() {\n  leftMotor -= pidMultiplier;\n  rightMotor += pidMultiplier;\n}\n\nvoid pidShiftRight() {\n  leftMotor += pidMultiplier;\n  rightMotor -= pidMultiplier;\n}\n\n// updates last & current distance\nvoid updateDistance() {\n  lastLeft = currentLeft;\n  currentLeft = distanceLeft.objectDistance(mm);\n  lastRight = currentRight;\n  currentRight = distanceRight.objectDistance(mm);\n}\n\n// turn execution based on previous instructions from for each loop & carTurns array\nvoid executeTurn(int i) {\n  \n  mpu.setRotation(0, degrees);\n\n  if (i == 0) {\n\n    // turn left\n    while (mpu.rotation(degrees) > -90) {\n      leftMotor = -20;\n      rightMotor = 100;\n    }\n\n    leftMotor = 80;\n    rightMotor = 80;\n\n    // change to detect left wall, wait 1s for wall to spawn in\n    useRightSensor = false;\n    wait(1, seconds);\n  } else {\n\n    // turn right\n    while (mpu.rotation(degrees) < 90) {\n      leftMotor = 100;\n      rightMotor = -20;\n    }\n    \n    leftMotor = 80;\n    rightMotor = 80;\n\n    // change to detect right wall, wait 1s for wall to spawn in\n    useRightSensor = true;\n    wait(1, seconds);\n  }\n}\n\n// simple stuff\nvoid finalLeg() {\n  leftMotor = 80;\n  rightMotor = 100;\n  wait(1, seconds);\n  leftMotor = 100;\n  rightMotor = 80;\n  wait(1, seconds);\n  rightMotor = 100;\n  wait(2, seconds);\n  backLeft.stop();\n  backRight.stop();\n}\n\n// manual safety abort\nvoid abort() {\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.setFont(prop60);\n  Brain.Screen.print(\"MANUAL\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"SAFETY\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"ABORT\");\n  while (true) {\n    backLeft.stop();\n    backRight.stop();\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"backLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"backRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"mpu","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22},{"port":[11],"name":"distanceLeft","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[12],"name":"distanceRight","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[17],"name":"colorLeft","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[18],"name":"colorRight","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[16],"name":"colorFront","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}