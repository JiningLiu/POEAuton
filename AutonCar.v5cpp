{"mode":"Text","textContent":"\n\n#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\ndo {                                                                         \\\nwait(5, msec);                                                             \\\n} while (!(condition))\n\n#define repeat(iterations)                                                     \\\nfor (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor backLeft = motor(PORT1, ratio36_1, false);\n\nmotor backRight = motor(PORT2, ratio36_1, true);\n\nmotor front = motor(PORT3, ratio18_1, false);\n\ninertial mpu = inertial(PORT6);\n\ndistance distanceLeft = distance(PORT11);\ndistance distanceRight = distance(PORT12);\noptical colorLeft = optical(PORT16);\noptical colorRight = optical(PORT17);\noptical colorFront = optical(PORT18);\ncontroller Controller1 = controller(primary);\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n/*----------------------------------------------------------*/\n/*                                                          */\n/*    Module:       main.cpp                                */\n/*    Author:       Jining Liu                              */\n/*    Created:      04/26/2024                              */\n/*    Description:  Autonomous Race Car for POE             */\n/*                                                          */\n/*----------------------------------------------------------*/\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// decides which distance sensor to use\nbool useRightSensor = true;\n\n// decides distance between car and wall in mm\nconst int distanceFromWall = 1000;\n\n// decides the intensity of system keep straight adjustments\nconst double pidMultiplier = 3;\n\n// decides initial speed of back motors\nconst int initLeftMotor = 50, initRightMotor = 80;\nconst int leftMotorMin = 5, rightMotorMin = 10;\nconst int leftMotorMax = 90, rightMotorMax = 100;\nint leftMotor = initLeftMotor, rightMotor = initRightMotor;\n\n// DO NOT CHANGE: stores distance sensor data, default 0\nint lastLeft, currentLeft, lastRight, currentRight;\n\n// DO NOT CHANGE: stopwatch for race timing in ms, default 0\nint raceTime;\n\n// required to predefine functions??? vex version of cpp is dumb... declarations down below\nvoid pidDistanceStraight();\nvoid executeTurn(int i, int delay);\nvoid finalLeg();\nvoid abort();\nvoid pasueResume();\nvoid stop();\nvoid debugPrint();\nvoid preparePrintBig(int y, int x, bool clear);\n\n// auton turns programming\n// timing is automatic\n//\n// make sure numberOfTurns is the same as the length of carTurns & preTurnDelay!\n// memory allocation is required!!!\n//\n// key:\n// -1 - left turn\n// 0 - keep straight\n// 1 - right turn\nconst int numberOfTurns = 6;\nconst int carTurns[numberOfTurns] = {0, 1, 0, 1, 1, -1};\n// this sets the seconds of delay BEFORE executing the turn or continuing on\nconst int preTurnDelay[numberOfTurns] = {4, 1, 4, 1, 1, 1};\n// this sets the seconds of delay AFTER executing the turn or continuing on\nconst int postTurnDelay[numberOfTurns] = {0, 2, 0, 2, 2, 2};\n\nbool paused = false;\nbool aborted = false;\n\nint main() {\n  \n  preparePrintBig(2, 1, true);\n  Brain.Screen.print(\"Initializing...\");\n  \n  Controller1.ButtonX.pressed(abort);\n  Controller1.ButtonR1.pressed(pasueResume);\n  \n  mpu.calibrate();\n  mpu.setRotation(0, degrees);\n  \n  // wait(1, seconds);\n  // preparePrintBig(2, 1, true);\n  // Brain.Screen.print(\"Hello!\");\n  // wait(2, seconds);\n  // preparePrintBig(2, 1, true);\n  // Brain.Screen.print(\"Starting in...\");\n  // wait(1, seconds);\n  // preparePrintBig(2, 1, true);\n  // Brain.Screen.print(\"5\");\n  // wait(1, seconds);\n  // preparePrintBig(2, 1, true);\n  // Brain.Screen.print(\"4\");\n  // wait(1, seconds);\n  // preparePrintBig(2, 1, true);\n  // Brain.Screen.print(\"3\");\n  // wait(1, seconds);\n  // preparePrintBig(2, 1, true);\n  // Brain.Screen.print(\"2\");\n  // wait(1, seconds);\n  // preparePrintBig(2, 1, true);\n  // Brain.Screen.print(\"1\");\n  // wait(1, seconds);\n  preparePrintBig(2, 1, true);\n  Brain.Screen.print(\"Currently:\");\n  \n  // record start time\n  raceTime = Brain.Timer.time(msec);\n  \n  backLeft.spin(forward);\n  backRight.spin(forward);\n  \n  for (int i = 0; i < numberOfTurns; i++) {\n    \n    stop();\n    \n    Brain.Screen.clearLine(3);\n    preparePrintBig(3, 1, false);\n    Brain.Screen.print(\"Straightaway\");\n    preparePrintBig(3, 14, false);\n    Brain.Screen.print(i + 1);\n    \n    // if car is detecting wall where it's supposed to be, always loop pid\n    while ((useRightSensor && currentRight < 2000) ||\n           (!useRightSensor && currentLeft < 2000)) {\n      stop();\n      pidDistanceStraight();\n      wait(200, msec);\n    }\n    \n    Brain.Screen.clearLine(3);\n    preparePrintBig(3, 1, false);\n    Brain.Screen.print(\"Turn\");\n    preparePrintBig(3, 6, false);\n    Brain.Screen.print(i + 1);\n    \n    // keep going delay before turn\n    wait(preTurnDelay[i], seconds);\n    \n    executeTurn(carTurns[i], postTurnDelay[i]);\n  }\n  \n  Brain.Screen.clearLine(3);\n  preparePrintBig(3, 1, false);\n  Brain.Screen.print(\"Final Leg!\");\n  \n  finalLeg();\n}\n\n// predefine for pid, this is so dumb\nvoid updateDistance();\nvoid pidShiftLeft();\nvoid pidShiftRight();\n\n// pid for back motors keeping straight and correct distance from wall\nvoid pidDistanceStraight() {\n  \n  updateDistance();\n  \n  if (useRightSensor) {\n    // using right sensor\n    if (currentRight > distanceFromWall) {\n      // too far from wall\n      pidShiftRight();\n    } else if (currentRight < distanceFromWall) {\n      // too close to wall\n      pidShiftLeft();\n    } else {\n      // keep straight\n      if (currentRight > lastRight) {\n        pidShiftRight();\n      } else if (currentRight < lastRight) {\n        pidShiftLeft();\n      }\n    }\n  } else {\n    // using left sensor\n    if (currentLeft > distanceFromWall) {\n      // too far from wall\n      pidShiftLeft();\n    } else if (currentLeft < distanceFromWall) {\n      // too close to wall\n      pidShiftRight();\n    } else {\n      // keep straight\n      if (currentLeft > lastLeft) {\n        pidShiftLeft();\n      } else if (currentLeft < lastLeft) {\n        pidShiftRight();\n      }\n    }\n  }\n  \n  debugPrint();\n  \n  backLeft.setVelocity(leftMotor, percent);\n  backRight.setVelocity(rightMotor, percent);\n}\n\nvoid pidShiftLeft() {\n  if (leftMotor > leftMotorMin) {\n    leftMotor -= pidMultiplier;\n  }\n  if (rightMotor < rightMotorMax) {\n    rightMotor += pidMultiplier;\n  }\n}\n\nvoid pidShiftRight() {\n  if (leftMotor < leftMotorMax) {\n    leftMotor += pidMultiplier;\n  }\n  if (rightMotor > rightMotorMin) {\n    rightMotor -= pidMultiplier;\n  }\n}\n\n// updates last & current distance\nvoid updateDistance() {\n  lastLeft = currentLeft;\n  currentLeft = distanceLeft.objectDistance(mm);\n  lastRight = currentRight;\n  currentRight = distanceRight.objectDistance(mm);\n}\n\n// turn execution based on previous instructions from for each loop & carTurns array\nvoid executeTurn(int i, int delay) {\n  \n  mpu.setRotation(0, degrees);\n  \n  if (i == -1) {\n    \n    // turn left\n    while (mpu.rotation(degrees) > -90) {\n      stop();\n      leftMotor = 10;\n      rightMotor = 100;\n    }\n    \n    leftMotor = initLeftMotor;\n    rightMotor = initRightMotor;\n    \n    // change to detect left wall, wait 1s for wall to spawn in\n    useRightSensor = false;\n    wait(delay, seconds);\n  } else if (i == 1) {\n    \n    // turn right\n    while (mpu.rotation(degrees) < 90) {\n      stop();\n      leftMotor = 100;\n      rightMotor = 10;\n    }\n    \n    leftMotor = initLeftMotor;\n    rightMotor = initRightMotor;\n    \n    // change to detect right wall, wait 1s for wall to spawn in\n    useRightSensor = true;\n    wait(delay, seconds);\n  }\n}\n\n// simple stuff\n// change to detect tape soon\nvoid finalLeg() {\n  leftMotor = 80;\n  rightMotor = 100;\n  wait(1, seconds);\n  leftMotor = 100;\n  rightMotor = 80;\n  wait(1, seconds);\n  rightMotor = 100;\n  wait(2, seconds);\n  backLeft.stop();\n  backRight.stop();\n  \n  // calculate & display race time\n  raceTime = Brain.Timer.time(msec) - raceTime;\n  \n  preparePrintBig(2, 1, true);\n  Brain.Screen.print(\"Finished!\");\n  preparePrintBig(4, 1, false);\n  Brain.Screen.print(\"Final Time:\");\n  \n  preparePrintBig(5, 1, false);\n  Brain.Screen.print(raceTime / 1000 / 60);\n  Brain.Screen.print(\":\");\n  Brain.Screen.print(raceTime / 1000 % 60);\n}\n\n// safety abort\nvoid abort() {\n  \n  aborted = true;\n  \n  preparePrintBig(2, 1, true);\n  Brain.Screen.print(\"SAFETY\");\n  preparePrintBig(3, 1, false);\n  Brain.Screen.print(\"KILLSWITCH\");\n  \n  // hard brake\n  backLeft.setVelocity(-100, percent);\n  backRight.setVelocity(-100, percent);\n  \n  wait((leftMotor + rightMotor) * 4, msec);\n  \n  while (true) {\n    leftMotor = 0;\n    rightMotor = 0;\n    backLeft.stop();\n    backRight.stop();\n  }\n}\n\n// self explanatory\nvoid pasueResume() {\n  paused = !paused;\n}\n\n// stop loop\nvoid stop() {\n  while (aborted || paused) {\n    wait(15, msec);\n  }\n}\n\n// debug printing\n//\n// val 1: left distance\n// val 2: right distance\n// val 3: left motor velocity\n// val 4: right motor velocity\n//\nvoid debugPrint() {\n  Brain.Screen.setFont(prop20);\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.print(currentLeft);\n  Brain.Screen.setCursor(1, 7);\n  Brain.Screen.print(currentRight);\n  Brain.Screen.setCursor(1, 13);\n  Brain.Screen.print(leftMotor);\n  Brain.Screen.setCursor(1, 19);\n  Brain.Screen.print(rightMotor);\n}\n\n// makes preparing for printing in big font easy\n//\n// how to use:\n// preparePrintBig(3, 1, true);\n//          ^  ^     ^\n//         /    \\     L --> clear screen before print?\n//        /      \\\n//   row #        column #\n//\nvoid preparePrintBig(int y, int x, bool clear) {\n  if (clear) {\n    Brain.Screen.clearScreen();\n  }\n  Brain.Screen.setCursor(y, x);\n  Brain.Screen.setFont(prop60);\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"backLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[2],"name":"backRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[3],"name":"front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"mpu","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22},{"port":[11],"name":"distanceLeft","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[12],"name":"distanceRight","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[16],"name":"colorLeft","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[17],"name":"colorRight","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[18],"name":"colorFront","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}